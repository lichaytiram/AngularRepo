{"version":3,"sources":["webpack:///src/app/account/account.component.ts","webpack:///src/app/account/account.component.html","webpack:///src/app/favorite/favorite.component.html","webpack:///src/app/favorite/favorite.component.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/shared/models/login.model.ts","webpack:///src/app/shared/modules/account/account.module.ts"],"names":["AccountComponent","store","router","unSubscribe","isLogin","sessionStorage","getItem","navigate","newUser","undefined","user$","pipe","push","subscribe","userUpdated","updateToggle","error","console","log","forEach","unsubscribe","dispatch","userId","editToggle","allTogglesOff","findAvailableToken","usernameToggle","passwordToggle","genderToggle","weightToggle","deleteToggle","showPasswordToggle","toggleName","alert","firstInput","secondInput","reset","oldUser","userForm","valueToUpdate","user","userValue","username","password","confirmPassword","gender","weight","setTimeout","controls","selector","templateUrl","styleUrls","FavoriteComponent","showCalculator","showMessage","showMessageLogin","addList","proteins$","protein","valueToAdd","add","egg","addToggle","proteinId","index","Object","keys","filter","key","value","getInputValue","amount","Number","sizeEgg","checkUpdateValidation","id","cancelEdit","tempProtein","sum","calculateProtein","visibilityOn","visibilityOff","animationBlockToggle","tempList","deleteProteinSwitch","deleteElement","saveNewUpdate","validation","values","pro","some","elementId","inputElement","document","getElementById","remove","name","className","LoginComponent","route","login","loginFail$","userLogin","register","Login","routes","path","component","canActivate","AccountModule","forChild","declarations","imports"],"mappings":"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","file":"account-account-module-es5.js","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\nimport { IProductsState } from '../store';\r\nimport { UserLogout, ProteinLogout, DeleteUser, DeleteAllProteins, UpdateUser, UserUpdated } from '../store/actions/index';\r\nimport { getUser, getUserUpdated } from '../store/selectors/user.selectors';\r\n\r\nimport { IUser } from '../shared/models/iUser.model';\r\nimport { User } from '../shared/models/user.model';\r\nimport { NgModel, NgForm } from '@angular/forms';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-account',\r\n  templateUrl: './account.component.html',\r\n  styleUrls: ['./account.component.css']\r\n})\r\nexport class AccountComponent implements OnInit, OnDestroy {\r\n\r\n  public user$: Observable<IUser>;\r\n  public newUser: IUser;\r\n\r\n  // toggles to show\r\n  public editToggle: boolean;\r\n  public usernameToggle: boolean;\r\n  public passwordToggle: boolean;\r\n  public genderToggle: boolean;\r\n  public weightToggle: boolean;\r\n\r\n  public updateToggle: boolean;\r\n  public deleteToggle: boolean;\r\n\r\n  // click button for show password instead ******.\r\n  public showPasswordToggle: boolean;\r\n\r\n  // unSubscribe list\r\n  private unSubscribe: Subscription[] = [];\r\n\r\n  constructor(private store: Store<IProductsState>, private router: Router) {\r\n\r\n    let isLogin: boolean = !!sessionStorage.getItem(\"login\");\r\n    if (!isLogin)\r\n      this.router.navigate([\"product/login\"]);\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    this.newUser = new User(undefined, undefined, undefined, undefined, undefined);\r\n\r\n    this.user$ = this.store.pipe(select(getUser));\r\n\r\n    this.unSubscribe.push(this.store.pipe(select(getUserUpdated)).subscribe(\r\n      userUpdated => this.updateToggle = userUpdated,\r\n      catchError(error => of(console.log(error)))\r\n    ));\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n\r\n    this.unSubscribe.forEach(subscribe => subscribe.unsubscribe());\r\n\r\n  }\r\n\r\n  public logout(): void {\r\n\r\n    this.store.dispatch(UserLogout());\r\n    this.store.dispatch(ProteinLogout());\r\n\r\n    this.router.navigate([\"product/home\"]);\r\n  }\r\n\r\n  public deleteAccount(userId: string): void {\r\n\r\n    // Should be one function , FireBase (data base) doesn't save proteins id as a foreign key.\r\n    this.store.dispatch(DeleteUser({ userId }));\r\n    this.store.dispatch(DeleteAllProteins({ userId }));\r\n\r\n  }\r\n\r\n  public editToggleOn(): void {\r\n    this.editToggle = true;\r\n  }\r\n\r\n  public editToggleOff(): void {\r\n    this.editToggle = false;\r\n    this.allTogglesOff();\r\n  }\r\n\r\n  // check if one of Toggles is on\r\n  public allowToEdit(): boolean {\r\n\r\n    if (this.editToggle && this.findAvailableToken())\r\n      return true;\r\n    return false;\r\n\r\n  }\r\n\r\n  // check if one of Toggles is on and return toggle name\r\n  private findAvailableToken(): string {\r\n\r\n    if (this.usernameToggle)\r\n      return \"username\";\r\n\r\n    if (this.passwordToggle)\r\n      return \"password\";\r\n\r\n    if (this.genderToggle)\r\n      return \"gender\";\r\n\r\n    if (this.weightToggle)\r\n      return \"weight\";\r\n\r\n    return null;\r\n\r\n  }\r\n\r\n  public deleteAccountSwitch() {\r\n    this.deleteToggle = !this.deleteToggle;\r\n  }\r\n\r\n  public showPasswordSwitch() {\r\n    this.showPasswordToggle = !this.showPasswordToggle;\r\n  }\r\n\r\n  public nameToggle(toggleName: string): void {\r\n\r\n    this.newUser = new User(undefined, undefined, undefined, undefined, undefined);\r\n\r\n    this.allTogglesOff();\r\n\r\n    switch (toggleName) {\r\n      case \"username\":\r\n        this.usernameToggle = true;\r\n        break;\r\n      case \"password\":\r\n        this.passwordToggle = true;\r\n        break;\r\n      case \"gender\":\r\n        this.genderToggle = true;\r\n        break;\r\n      case \"weight\":\r\n        this.weightToggle = true;\r\n        break;\r\n      default:\r\n        alert(\"Something was wrong!\\nPlease try again.\");\r\n    }\r\n\r\n  }\r\n\r\n  public cancelTogglesOff(firstInput?: NgModel, secondInput?: NgModel) {\r\n\r\n    if (firstInput)\r\n      firstInput.reset();\r\n\r\n    if (secondInput)\r\n      secondInput.reset();\r\n\r\n    this.allTogglesOff();\r\n  }\r\n\r\n  public allTogglesOff(): void {\r\n    this.usernameToggle = false;\r\n    this.passwordToggle = false;\r\n    this.genderToggle = false;\r\n    this.weightToggle = false;\r\n  }\r\n\r\n  public updateUser(oldUser: IUser, userForm: NgForm): void {\r\n\r\n    const valueToUpdate: string = this.findAvailableToken();\r\n\r\n    let user: IUser = { ...oldUser };\r\n    const userValue = { ...this.newUser }\r\n\r\n    // Update the user with new value\r\n    switch (valueToUpdate) {\r\n      case \"username\":\r\n        user.username = userValue.username;\r\n        break;\r\n      case \"password\":\r\n        user.password = userValue.password;\r\n        user.confirmPassword = userValue.confirmPassword;\r\n        break;\r\n      case \"gender\":\r\n        user.gender = userValue.gender;\r\n        break;\r\n      case \"weight\":\r\n        user.weight = userValue.weight;\r\n        break;\r\n      default:\r\n        alert(\"Something was wrong!\\nPlease try again.\");\r\n\r\n    }\r\n\r\n    this.store.dispatch(UpdateUser({ user }));\r\n\r\n    setTimeout(() => {\r\n      this.store.dispatch(UserUpdated());\r\n      this.allTogglesOff();\r\n\r\n      if (valueToUpdate != \"gender\")\r\n        userForm.controls[valueToUpdate].reset();\r\n\r\n    }, 2000);\r\n\r\n  }\r\n\r\n}\r\n","<div *ngIf=\"user$ | async as user\">\r\n\r\n\r\n    <div class=\"text-center\">\r\n\r\n        <div *ngIf=\"deleteToggle\">\r\n\r\n            <div class=\"card show\">\r\n\r\n                <div class=\"card-body\">\r\n\r\n                    <h4>You are try to delete your account!</h4>\r\n                    <h5>Please confirm!</h5>\r\n                    <input type=\"button\" value=\"&#xf2ed; Delete\" (click)=\"deleteAccount(user.id)\"\r\n                        class=\"fas p-1 btn text-danger\">\r\n                    <input type=\"button\" value=\"&#xf0e2; Cancel\" (click)=\"deleteAccountSwitch()\"\r\n                        class=\"fas p-1 btn text-primary\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div>\r\n\r\n        <button (click)=\"logout()\" class=\"text-primary m-1\">\r\n            <i class=\"fas fa-sign-out-alt\"></i> Log Out</button><br>\r\n        <button [disabled]=\"deleteToggle\" (click)=\"deleteAccountSwitch()\" class=\"text-danger m-1\">\r\n            <i class=\"fas fa-minus-circle\"></i> Delete Account</button>\r\n\r\n    </div>\r\n\r\n    <div class=\"container\">\r\n\r\n        <div>\r\n\r\n            <h5 class=\"text-center\">Your user</h5>\r\n\r\n            <form #userForm=\"ngForm\" (ngSubmit)=\"updateUser(user,userForm)\">\r\n\r\n                <div class=\"row justify-content-center\">\r\n\r\n                    <label class=\"col-4 col-sm-3 col-md-2 col-lg-1 col-xl-1 p-0\">Username: </label>\r\n                    <span *ngIf=\"!editToggle\"\r\n                        class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0\">{{user.username}}</span>\r\n                    <input *ngIf=\"editToggle && !usernameToggle\" type=\"button\" [disabled]=\"allowToEdit()\"\r\n                        value=\"&#xf4ff; Edit username\" (click)=\"nameToggle('username')\"\r\n                        class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0 fas\">\r\n\r\n                    <div [class.d-none]=\"!editToggle || editToggle && !usernameToggle\"\r\n                        class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0\">\r\n\r\n                        <small class=\"text-danger\" [class.d-none]=\"username.untouched || username.valid\">\r\n                            Must to enter only three letters at least</small>\r\n\r\n                        <input type=\"text\" title=\"Enter an username\" placeholder=\"Enter an username\" name=\"username\"\r\n                            #username=\"ngModel\" [(ngModel)]=\"newUser.username\" required pattern=\"^[a-zA-Z]{3,}$\"\r\n                            [class.border-danger]=\"username.invalid && username.touched\"\r\n                            class=\"rounded-pill border border-primary text-center inputValue\">\r\n\r\n                        <div class=\"row justify-content-around p-1\">\r\n\r\n                            <input type=\"button\" value=\"&#xf410; Cancel\" (click)=\"cancelTogglesOff(username)\"\r\n                                class=\"far text-danger\">\r\n                            <input type=\"submit\" value=\"&#xf0c7; Save\" [disabled]=\"username.invalid || updateToggle\"\r\n                                class=\"btn far text-primary\">\r\n                            <i *ngIf=\"updateToggle && usernameToggle\" class=\"fas fa-check text-success\"></i>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div class=\"row justify-content-center\">\r\n\r\n                    <label class=\"col-4 col-sm-3 col-md-2 col-lg-1 col-xl-1 p-0\">Password: </label>\r\n\r\n                    <div *ngIf=\"!editToggle\" class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0\">\r\n\r\n                        <span *ngIf=\"!showPasswordToggle\" class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0\">\r\n                            <span>******** </span>\r\n                            <button (click)=\"showPasswordSwitch()\"><i class=\"fas fa-eye eye\"></i></button>\r\n                        </span>\r\n                        <span *ngIf=\"showPasswordToggle\" class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0\">\r\n                            <span>{{user.password}} </span>\r\n                            <button (click)=\"showPasswordSwitch()\"><i class=\"fas fa-eye-slash eye\"></i></button>\r\n                        </span>\r\n\r\n                    </div>\r\n\r\n                    <input *ngIf=\"editToggle && !passwordToggle\" type=\"button\" [disabled]=\"allowToEdit()\"\r\n                        value=\"&#xf4ff; Edit password\" (click)=\"nameToggle('password')\"\r\n                        class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0 fas\">\r\n\r\n                    <div [class.d-none]=\"!editToggle || editToggle && !passwordToggle\"\r\n                        class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0\">\r\n\r\n                        <div class=\"text-danger\" [class.d-none]=\"password.untouched || password.valid\">\r\n                            <small>Must to enter eight letters at least.</small>\r\n                            <small>(one upper case one lower case and a number)</small>\r\n                        </div>\r\n\r\n                        <input type=\"password\" title=\"Enter a password\" placeholder=\"Enter a password\" name=\"password\"\r\n                            #password=\"ngModel\" [(ngModel)]=\"newUser.password\" required\r\n                            pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$\"\r\n                            [class.border-danger]=\"password.invalid && password.touched\"\r\n                            class=\"rounded-pill border border-primary text-center inputValue\">\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div class=\"row justify-content-center\" [class.d-none]=\"!editToggle || editToggle && !passwordToggle\">\r\n\r\n                    <label class=\"col-4 col-sm-3 col-md-2 col-lg-1 col-xl-1 p-0\">Confirm: </label>\r\n                    <span *ngIf=\"!editToggle\"\r\n                        class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0\">{{user.confirmPassword}}</span>\r\n                    <span *ngIf=\"editToggle && !passwordToggle\"\r\n                        class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0\"></span>\r\n\r\n                    <div [class.d-none]=\"!editToggle || editToggle && !passwordToggle\"\r\n                        class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0\">\r\n\r\n                        <div class=\"text-danger\"\r\n                            [class.d-none]=\"confirmPassword.untouched || confirmPassword.valid && confirmPassword.value===password.value\">\r\n                            <small>Your passwords isn't match!</small>\r\n                            <small>Please try again.</small>\r\n                        </div>\r\n\r\n                        <input type=\"password\" title=\"Enter again a password to confirm\" placeholder=\"Enter a password\"\r\n                            name=\"confirmPassword\" #confirmPassword=\"ngModel\" [(ngModel)]=\"newUser.confirmPassword\"\r\n                            required pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$\"\r\n                            [disabled]=\"password.invalid\"\r\n                            [class.border-danger]=\"(confirmPassword.touched && confirmPassword.value!==password.value)\"\r\n                            class=\"rounded-pill border border-primary text-center inputValue\">\r\n\r\n                        <div class=\"row justify-content-around p-1\">\r\n\r\n                            <input type=\"button\" value=\"&#xf410; Cancel\"\r\n                                (click)=\"cancelTogglesOff(password,confirmPassword)\" class=\"far text-danger\">\r\n                            <input type=\"submit\" value=\"&#xf0c7; Save\"\r\n                                [disabled]=\"confirmPassword.value!==password.value || password.invalid || updateToggle\"\r\n                                class=\"btn far text-primary\">\r\n                            <i *ngIf=\"updateToggle && passwordToggle\" class=\"fas fa-check text-success\"></i>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div class=\"row justify-content-center\">\r\n\r\n                    <label class=\"col-4 col-sm-3 col-md-2 col-lg-1 col-xl-1 p-0\">Gender: </label>\r\n                    <span *ngIf=\"!editToggle\"\r\n                        class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0\">{{user.gender}}</span>\r\n                    <input *ngIf=\"editToggle && !genderToggle\" type=\"button\" [disabled]=\"allowToEdit()\"\r\n                        value=\"&#xf4ff; Edit gender\" (click)=\"nameToggle('gender')\"\r\n                        class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0 fas\">\r\n\r\n                    <div [class.d-none]=\"!editToggle || editToggle && !genderToggle\"\r\n                        class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0\">\r\n\r\n                        <label>\r\n                            <input type=\"radio\" name=\"male\" #male=\"ngModel\" value=\"Male\" required\r\n                                [(ngModel)]=\"newUser.gender\">\r\n                            <span class=\"rounded-pill text-center m-1 radioMale\"><i class=\"fas fa-male m-1\"></i></span>\r\n                        </label>\r\n\r\n                        <label>\r\n                            <input type=\"radio\" name=\"female\" #female=\"ngModel\" value=\"Female\" required\r\n                                [(ngModel)]=\"newUser.gender\">\r\n                            <span class=\"rounded-pill text-center m-1 radioFemale\"><i\r\n                                    class=\"fas fa-female m-1\"></i></span>\r\n                        </label>\r\n\r\n                        <div class=\"row justify-content-around p-1\">\r\n\r\n                            <input type=\"button\" value=\"&#xf410; Cancel\" (click)=\"cancelTogglesOff()\"\r\n                                class=\"far text-danger\">\r\n                            <input type=\"submit\" value=\"&#xf0c7; Save\"\r\n                                [disabled]=\"male.invalid && female.invalid || updateToggle\"\r\n                                class=\"btn far text-primary\">\r\n                            <i *ngIf=\"updateToggle && genderToggle\" class=\"fas fa-check text-success\"></i>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div class=\"row justify-content-center\">\r\n\r\n                    <label class=\"col-4 col-sm-3 col-md-2 col-lg-1 col-xl-1 p-0\">Weight: </label>\r\n                    <span *ngIf=\"!editToggle\"\r\n                        class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0\">{{user.weight}}</span>\r\n                    <input *ngIf=\"editToggle && !weightToggle\" type=\"button\" [disabled]=\"allowToEdit()\"\r\n                        value=\"&#xf4ff; Edit weight\" (click)=\"nameToggle('weight')\"\r\n                        class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0 fas\">\r\n\r\n                    <div [class.d-none]=\"!editToggle || editToggle && !weightToggle\"\r\n                        class=\"col-5 col-sm-4 col-md-3 col-lg-2 col-xl-2 p-0\">\r\n\r\n                        <small class=\"text-danger\" [class.d-none]=\"weight.untouched || weight.valid\">Your weight\r\n                            must be greater than zero .</small>\r\n\r\n                        <input type=\"number\" title=\"Enter your weight\" placeholder=\"Enter a weight\" name=\"weight\"\r\n                            #weight=\"ngModel\" [(ngModel)]=\"newUser.weight\" required pattern=\"^[1-9]\\d*$\"\r\n                            [class.border-danger]=\"weight.invalid && weight.touched\"\r\n                            class=\"rounded-pill border border-primary text-center inputValue\">\r\n\r\n                        <div class=\"row justify-content-around p-1\">\r\n\r\n                            <input type=\"button\" value=\"&#xf410; Cancel\" (click)=\"cancelTogglesOff(weight)\"\r\n                                class=\"far text-danger\">\r\n                            <input type=\"submit\" value=\"&#xf0c7; Save\" [disabled]=\"weight.invalid || updateToggle\"\r\n                                class=\"btn far text-primary\">\r\n                            <i *ngIf=\"updateToggle && weightToggle\" class=\"fas fa-check text-success\"></i>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </form>\r\n\r\n        </div>\r\n\r\n        <div class=\"text-center\">\r\n            <input type=\"button\" value=\"&#xf4ff; Edit account\" [class.d-none]=\"editToggle\" (click)=\"editToggleOn()\"\r\n                class=\"fas text-primary\">\r\n            <input type=\"button\" value=\"&#xf410; Cancel edit\"\r\n                [class.d-none]=\"!editToggle || editToggle && allowToEdit()\" (click)=\"editToggleOff()\"\r\n                class=\"far text-danger\">\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"row justify-content-center m-0 img\">\r\n        <img src=\"../../assets/photos/person-holding-black-and-silver-steel.jpg\" class=\"col-11 col-md-9 col-lg-8 col-xl-6\">\r\n    </div>\r\n\r\n</div>","<div class=\"text-center\">\r\n\r\n    <div *ngIf=\"!(user$ |async)\" class=\"disconnected\">\r\n\r\n        <p>You must login to see your favorite list.</p>\r\n        <p>You can click <button (click)=\"loginPage()\">here</button> to move login page</p>\r\n\r\n    </div>\r\n\r\n    <div *ngIf=\"user$ | async as user\" class=\"connected text-center\">\r\n\r\n        <div class=\"header\">\r\n\r\n            <h2>Welcome Back - {{user.username}}</h2>\r\n            <h3>Your favorite lists</h3>\r\n\r\n        </div>\r\n\r\n        <div *ngFor=\"let protein of proteins$ | async ; index as i;\">\r\n\r\n            <div class=\"inner m-0\">\r\n\r\n                <div class=\"grid p-2\">\r\n\r\n                    <div [class.eggCard]=\"proteinKeyValue.key === 'egg' && editToggle === i && !addToggle\" class=\"card\"\r\n                        [class.d-none]=\"proteinKeyValue.key === 'id'\"\r\n                        *ngFor=\"let proteinKeyValue of protein | keyvalue\">\r\n\r\n                        <div [class.d-none]=\"editToggle !== i || addToggle\">\r\n                            <input type=\"button\" (click)=\"deleteOneProtein(user.id,protein.id,proteinKeyValue.key)\"\r\n                                value=\"&#xf2ed;\" class=\"fas text-danger deleteOneProtein\">\r\n                        </div>\r\n\r\n                        <div *ngIf=\"proteinKeyValue.key !== 'egg'\" class=\"m-0\">\r\n\r\n                            <div class=\"row justify-content-center m-0\">\r\n\r\n                                <label class=\"col-5 col-sm-4 box m-1\">{{proteinKeyValue.key}}</label>\r\n                                <label class=\"col-1\"></label>\r\n                                <label class=\"col-5 col-sm-4 box m-1\"> {{proteinKeyValue.value}}</label>\r\n\r\n                                <div [class.d-none]=\"editToggle !== i || addToggle\" class=\"col-12 p-0\">\r\n\r\n                                    <span class=\"col-2\">{{proteinKeyValue.key}}</span>\r\n\r\n                                    <input type=\"number\" title=\"Enter a new value\" [id]=\"proteinKeyValue.key+i\"\r\n                                        (keyup)=\"proteinKeyValue.value\" [value]=\"proteinKeyValue.value\"\r\n                                        class=\"text-center rounded-pill border border-white inputEdit col-4\">\r\n\r\n                                    <div class=\"d-inline col-2\">\r\n\r\n                                        <label\r\n                                            *ngIf=\"proteinKeyValue.key === 'tuna'|| proteinKeyValue.key === 'meat' || proteinKeyValue.key === 'cheese' || proteinKeyValue.key === 'cottage' || proteinKeyValue.key === 'quinoa'\">grams</label>\r\n                                        <label *ngIf=\"proteinKeyValue.key === 'almonds'\">handful</label>\r\n                                        <label *ngIf=\"proteinKeyValue.key === 'bread'\">slices</label>\r\n                                        <label\r\n                                            *ngIf=\"proteinKeyValue.key === 'powder' || proteinKeyValue.key === 'gainer'\">portions</label>\r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div *ngIf=\"proteinKeyValue.key === 'egg'\">\r\n\r\n                            <div class=\"row justify-content-center m-0\">\r\n\r\n                                <label class=\"col smallBox p-0 m-2\">{{proteinKeyValue.key}}</label>\r\n\r\n                            </div>\r\n\r\n                            <div class=\"row justify-content-center m-0\">\r\n\r\n                                <small class=\"col-5 col-sm-4 box\">amount</small>\r\n                                <label class=\"col-1\"></label>\r\n                                <small class=\"col-5 col-sm-4 box\">{{proteinKeyValue.value.amount}}</small>\r\n\r\n                            </div>\r\n\r\n                            <div class=\"row justify-content-center m-0\">\r\n\r\n                                <small class=\"col-5 col-sm-4 box\">size</small>\r\n                                <small class=\"col-1\"></small>\r\n                                <small class=\"col-5 col-sm-4 box\">{{proteinKeyValue.value.sizeEgg}}</small>\r\n\r\n                            </div>\r\n\r\n                            <div [class.d-none]=\"editToggle !== i || addToggle\">\r\n\r\n                                <div class=\"row justify-content-center m-3\">\r\n\r\n                                    <small *ngIf=\"proteinKeyValue.value.sizeEgg === 'empty'\" class=\"text-primary\">*Must\r\n                                        enter an amount and size</small>\r\n\r\n                                    <div class=\"col-12\">\r\n\r\n                                        <small class=\"text-capitalize eggSize\">amount</small>\r\n\r\n                                        <input type=\"number\" title=\"Enter a new value\" [id]=\"'amount'+i\"\r\n                                            (keyup)=\"proteinKeyValue.value.amount\"\r\n                                            [value]=\"proteinKeyValue.value.amount\"\r\n                                            class=\"text-center col-4 rounded-pill border border-white inputEdit\">\r\n                                    </div>\r\n\r\n                                    <div class=\"col-12\">\r\n\r\n                                        <small class=\"text-capitalize eggSize\">size</small>\r\n\r\n                                        <select [id]=\"'sizeEgg'+i\" title=\"Select a new value from list\"\r\n                                            [value]=\"proteinKeyValue.value.sizeEgg\" class=\"text-capitalize col-4\">\r\n                                            <option value=\"S\">small</option>\r\n                                            <option value=\"M\">medium</option>\r\n                                            <option value=\"L\">large</option>\r\n                                        </select>\r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div [class.animationBlock]=\"animationBlockToggle\" class=\"card size animation\">\r\n\r\n                    <div *ngIf=\"editToggle !== i\" class=\"col-12 p-0\">\r\n\r\n                        <input type=\"button\" value=\"&#xf06e; Show\" (click)=\"show(user,protein)\"\r\n                            class=\"btn btn-outline-primary rounded-pill far m-1 col-8 col-sm-6\">\r\n\r\n                        <div class=\"col-12 p-0\">\r\n                            <input type=\"button\" value=\"&#xf410; Delete\" (click)=\"deleteProteinSwitch()\"\r\n                                class=\"btn btn-outline-danger rounded-pill far m-1 col-4 col-sm-3\">\r\n                            <input type=\"button\" value=\"&#xf044; Edit\" (click)=\"editToggleSwitch(i)\"\r\n                                class=\"btn btn-outline-secondary rounded-pill fas m-1 col-4 col-sm-3\">\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div *ngIf=\"editToggle === i && !addToggle\" class=\"col-12 p-0\">\r\n\r\n                        <input type=\"button\" value=\"&#xf0c7; Update\" (click)=\"saveNewUpdate(user.id,protein.id)\"\r\n                            class=\"btn btn-outline-primary rounded-pill fas m-1 col-8 col-sm-6\">\r\n                        <div class=\"col-12 p-0\">\r\n                            <input type=\"button\" value=\"&#xf410; Cancel\" (click)=\"cancelEdit()\"\r\n                                class=\"btn btn-outline-danger rounded-pill far m-1 col-4 col-sm-3\">\r\n                            <input type=\"button\" value=\"&#xf0fe; Add\" (click)=\"addToggleSwitch(protein)\"\r\n                                class=\"btn btn-outline-success rounded-pill fas m-1 col-4 col-sm-3\">\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div *ngIf=\"editToggle === i && addToggle\" class=\"col-12 p-0\">\r\n\r\n                        <select [(ngModel)]=\"add\" class=\"text-capitalize text-center col-8 col-sm-6\">\r\n                            <option *ngIf=\"addList?.length === 0\">Your list full</option>\r\n                            <option *ngFor=\"let proteinList of addList\">{{proteinList}}</option>\r\n                        </select>\r\n\r\n                        <div class=\"col-12 p-0\">\r\n                            <input type=\"button\" value=\"&#xf410; Cancel\" (click)=\"cancelEdit()\"\r\n                                class=\"btn btn-outline-danger rounded-pill far m-1 col-4 col-sm-3\">\r\n                            <input type=\"button\" value=\"&#xf0fe; Add\" [disabled]=\"addList?.length === 0\"\r\n                                (click)=\"addProtein(user.id,protein)\"\r\n                                class=\"btn btn-outline-success rounded-pill fas m-1 col-4 col-sm-3\">\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div class=\"parallax\"></div>\r\n\r\n            <div *ngIf=\"deleteToggle\">\r\n\r\n                <div class=\"card show\">\r\n\r\n                    <div class=\"card-body\">\r\n                        <h4>You try to delete a protein!</h4>\r\n                        <h5>Please confirm!</h5>\r\n                        <input type=\"button\" value=\"&#xf2ed; Delete\"\r\n                            (click)=\"deleteProteinConfirmed(user.id,protein.id)\" class=\"fas p-1 btn text-danger\">\r\n                        <input type=\"button\" value=\"&#xf0e2; Cancel\" (click)=\"deleteProteinSwitch()\"\r\n                            class=\"fas p-1 btn text-primary\">\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"text-center\">\r\n\r\n            <div id=\"show\" class=\"invisible\">\r\n\r\n                <div class=\"card show\">\r\n\r\n                    <div class=\"card-body\">\r\n                        <p>{{showMessage}}</p>\r\n                        <p *ngIf=\"user\">{{showMessageLogin}}</p>\r\n                        <input type=\"button\" value=\"&#xf164;\" (click)=\"cancelShow()\" class=\"fas showButton\">\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div *ngIf=\"updateToggle\">\r\n\r\n                <div class=\"card update\">\r\n\r\n                    <div class=\"card-body\">\r\n                        <h4>Must enter a positive numbers</h4>\r\n                        <input type=\"button\" value=\"&#xf164;\" (click)=\"updateToggleSwitch()\" class=\"fas updateButton\">\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { IProductsState } from '../store';\r\nimport { UpdateProtein, DeleteProtein } from '../store/actions/protein.action';\r\n\r\nimport { getUser, getAllProteins } from '../store/selectors'\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { IUser } from '../shared/models/iUser.model';\r\nimport { IProtein } from '../shared/models/iProtein.model';\r\nimport { Protein } from '../shared/models/protein.model';\r\nimport { showCalculator } from '../shared/services/showCalculator';\r\nimport { Egg } from '../shared/models/egg.model';\r\nimport { IEgg } from '../shared/models/iEgg.model';\r\n\r\n@Component({\r\n  selector: 'app-favorite',\r\n  templateUrl: './favorite.component.html',\r\n  styleUrls: ['./favorite.component.css']\r\n})\r\nexport class FavoriteComponent implements OnInit {\r\n\r\n  public user$: Observable<IUser>\r\n  public proteins$: Observable<IProtein[]>\r\n\r\n  // Add values for create add of lines in favorites\r\n  public addList: string[];\r\n  public add: string;\r\n\r\n  // Messages to user\r\n  public showMessage: string = \"\";\r\n  public showMessageLogin: string = \"\";\r\n\r\n  // Toggles\r\n  public editToggle: number;\r\n  public addToggle: boolean;\r\n  public updateToggle: boolean;\r\n  public deleteToggle: boolean;\r\n  public animationBlockToggle: boolean;\r\n\r\n  constructor(private store: Store<IProductsState>, private router: Router, private showCalculator: showCalculator) { }\r\n\r\n  ngOnInit() {\r\n\r\n    this.addList = [];\r\n    this.user$ = this.store.pipe(select(getUser));\r\n    this.proteins$ = this.store.pipe(select(getAllProteins));\r\n\r\n  }\r\n\r\n  // Add one element inside existing protein\r\n  public addProtein(userId: string, protein: IProtein): void {\r\n\r\n    const valueToAdd: string = this.add;\r\n\r\n    if (valueToAdd === undefined)\r\n      return;\r\n\r\n    if (valueToAdd === 'egg') {\r\n      const egg: IEgg = new Egg(0, 'empty');\r\n      protein.egg = egg;\r\n    } else\r\n      protein[valueToAdd] = 0;\r\n\r\n    this.store.dispatch(UpdateProtein({ userId, protein }));\r\n    this.addToggle = false;\r\n\r\n\r\n  }\r\n\r\n  public saveNewUpdate(userId: string, proteinId: string): void {\r\n\r\n    const index: number = this.editToggle;\r\n    const protein: IProtein = new Protein();\r\n\r\n    Object.keys(protein).filter(key => key !== 'id' && key !== 'egg').forEach(key => {\r\n\r\n      const value = this.getInputValue(key, index);\r\n      if (value)\r\n        protein[key] = value;\r\n\r\n    });\r\n\r\n\r\n    if (this.getInputValue('amount', index) && this.getInputValue('sizeEgg', index)) {\r\n\r\n      const amount: number = Number(this.getInputValue('amount', index));\r\n      const sizeEgg: string = this.getInputValue('sizeEgg', index);\r\n      const egg: IEgg = new Egg(amount, sizeEgg);\r\n      protein.egg = egg;\r\n    }\r\n\r\n    // Send clean Object without undefined properties to Store\r\n    Object.keys(protein).forEach(key => !protein[key] && delete protein[key]);\r\n\r\n    if (!protein.egg || !protein.egg.sizeEgg)\r\n      delete protein.egg;\r\n\r\n    if (this.checkUpdateValidation(protein)) {\r\n      protein.id = proteinId;\r\n      this.store.dispatch(UpdateProtein({ userId, protein }));\r\n      this.cancelEdit();\r\n    } else\r\n      this.updateToggle = true;\r\n\r\n  }\r\n\r\n  public loginPage(): void {\r\n    this.router.navigate(['/product/account/login']);\r\n  }\r\n\r\n  public show(user: IUser, tempProtein: IProtein): void {\r\n\r\n    const { id, egg, ...protein } = tempProtein;\r\n    const sum: number = this.showCalculator.calculateProtein(protein, egg);\r\n\r\n    const value: number = user.weight * 2 - sum;\r\n    this.showMessage = `You eat ${sum} protein approximately.`;\r\n    this.showMessageLogin = value > 0 ? `You need more ${value}` : 'You Eat enough protein for today good job!';\r\n\r\n    this.visibilityOn('show');\r\n  }\r\n\r\n  public cancelShow(): void {\r\n    this.visibilityOff('show');\r\n  }\r\n\r\n  public editToggleSwitch(editToggle: number): void {\r\n    this.animationBlockToggle = true;\r\n    this.editToggle = editToggle;\r\n    this.addToggle = undefined;\r\n  }\r\n\r\n  public updateToggleSwitch(): void {\r\n    this.updateToggle = undefined;\r\n  }\r\n\r\n  public deleteProteinSwitch(): void {\r\n    this.deleteToggle = !this.deleteToggle;\r\n  }\r\n\r\n  public addToggleSwitch(protein: IProtein): void {\r\n\r\n    const tempList: IProtein = new Protein();\r\n    const addList: string[] = [];\r\n\r\n    Object.keys(protein).forEach(key => delete tempList[key]);\r\n    Object.keys(tempList).forEach(key => addList.push(key));\r\n\r\n    this.addToggle = true;\r\n    this.addList = addList;\r\n  }\r\n\r\n  public cancelEdit(): void {\r\n    this.editToggle = undefined;\r\n    this.addToggle = undefined;\r\n  }\r\n\r\n  public deleteProteinConfirmed(userId: string, proteinId: string): void {\r\n\r\n    this.store.dispatch(DeleteProtein({ userId, proteinId }));\r\n    this.deleteProteinSwitch();\r\n\r\n  }\r\n\r\n  public deleteOneProtein(userId: string, proteinId: string, key: string): void {\r\n\r\n    const index: number = this.editToggle;\r\n    if (key === 'egg') {\r\n      this.deleteElement('amount', index);\r\n      this.deleteElement('sizeEgg', index);\r\n    } else\r\n      this.deleteElement(key, index);\r\n\r\n    this.saveNewUpdate(userId, proteinId);\r\n\r\n  }\r\n\r\n  private checkUpdateValidation(protein: IProtein): boolean {\r\n\r\n    const { egg, ...pro } = protein;\r\n\r\n    if (egg && egg.amount < 0)\r\n      return false;\r\n\r\n    let validation: boolean = true\r\n    Object.values(pro).some(value => value < 0 && (validation = false) && true);\r\n\r\n    return validation;\r\n  }\r\n\r\n  // Get element value by his id ( id is contain key and index of array -HTML Template- ).\r\n  private getInputValue(key: string, index: number): string {\r\n    const elementId: string = key + index;\r\n    const inputElement: HTMLInputElement = <HTMLInputElement>document.getElementById(elementId);\r\n    return inputElement?.value;\r\n  }\r\n\r\n  private deleteElement(key: string, index: number): void {\r\n    const elementId: string = key + index;\r\n    document.getElementById(elementId).remove();\r\n  }\r\n\r\n  private visibilityOn(name: string): void {\r\n    document.getElementById(name).className = \"visibility: visible\";\r\n  }\r\n\r\n  private visibilityOff(name: string): void {\r\n    document.getElementById(name).className = \"visibility: invisible\";\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { ILogin } from '../shared/models/iLogin.model';\r\nimport { Login } from '../shared/models/login.model';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\nimport { IProductsState } from '../store';\r\nimport { LoginUser, UserLoginFailOff } from '../store/actions/user.action';\r\nimport { Observable } from 'rxjs';\r\nimport { getLoginFail } from '../store/selectors/user.selectors';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n\r\n  public login: ILogin;\r\n  public loginFail$: Observable<boolean>;\r\n\r\n  constructor(private store: Store<IProductsState>, private route: Router) { }\r\n\r\n  ngOnInit() {\r\n\r\n    this.login = new Login(undefined, undefined);\r\n    this.loginFail$ = this.store.pipe(select(getLoginFail));\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n\r\n    this.store.dispatch(UserLoginFailOff());\r\n\r\n  }\r\n\r\n  public tryAgain() {\r\n    this.store.dispatch(UserLoginFailOff());\r\n  }\r\n\r\n  public userLogin(): void {\r\n    const login: ILogin = this.login;\r\n    this.store.dispatch(LoginUser({ login }));\r\n  }\r\n\r\n  public register(): void {\r\n    this.route.navigate(['/product/register']);\r\n  }\r\n\r\n}","<div class=\"card\">\r\n\r\n    <div *ngIf=\"loginFail$ | async\" class=\"loginFail\">\r\n        <h5>Your username and password don't match!</h5>\r\n\r\n        <button (click)=\"tryAgain()\" class=\"loginFailButton\">\r\n            <h6>Please try again</h6>\r\n            <i class=\"fas fa-undo\"></i>\r\n        </button>\r\n\r\n    </div>\r\n\r\n    <div class=\"p-0 row\">\r\n\r\n        <div class=\"col-8\">\r\n\r\n            <div class=\"card-body\">\r\n\r\n                <h5 class=\"card-title \">Lets login to your user</h5>\r\n                <form (ngSubmit)=\"userLogin()\" #userForm=\"ngForm\">\r\n\r\n                    <div>\r\n                        <p class=\"m-0\">Enter an username</p>\r\n                        <small class=\"text-danger\" [class.d-none]=\"username.untouched || username.valid\">\r\n                            Must to enter only three letters at least.</small>\r\n                        <input type=\"text\" title=\"Enter an username\" name=\"username\" #username=\"ngModel\"\r\n                            [(ngModel)]=\"login.username\" required pattern=\"^[a-zA-Z]{3,}$\"\r\n                            [class.border-danger]=\"username.invalid && username.touched\"\r\n                            class=\"rounded-pill border border-primary\">\r\n                    </div>\r\n\r\n                    <div>\r\n                        <p class=\"m-0\">Enter a password</p>\r\n\r\n                        <div class=\"text-danger\" [class.d-none]=\"password.untouched || password.valid\">\r\n                            <small>Must to enter eight letters at least.</small><br>\r\n                            <small>(one upper case one lower case and a number)</small>\r\n                        </div>\r\n\r\n                        <input type=\"password\" title=\"Enter a password\" name=\"password\" #password=\"ngModel\"\r\n                            [(ngModel)]=\"login.password\" required\r\n                            pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$\"\r\n                            [class.border-danger]=\"password.invalid && password.touched\"\r\n                            class=\"rounded-pill border border-primary\">\r\n                    </div>\r\n\r\n                    <div>\r\n\r\n                        <hr>\r\n                        <div class=\"text-center\">\r\n                            <input type=\"submit\" value=\"Login &#xf2f6;\"\r\n                                [class.invalid]=\"userForm.form.invalid && username.touched && password.touched\"\r\n                                [disabled]=\"userForm.form.invalid\" class=\"btn btn-outline-primary rounded-pill m-1 fas\">\r\n                            <input type=\"button\" (click)=\"register()\" value=\"Create &#xf234;\"\r\n                                class=\"btn btn-outline-primary rounded-pill m-1 fas\">\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"col-4\">\r\n            <img src=\"/assets/photos/man_body_torso_muscles.jpg\" class=\"image\">\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>","import { ILogin } from './iLogin.model';\r\n\r\nexport class Login implements ILogin {\r\n    constructor(\r\n        public username: string,\r\n        public password: string,\r\n    ) { }\r\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SharedModule } from '../shared.module';\nimport { guards } from 'src/app/store/guards';\nimport { FavoriteComponent } from 'src/app/favorite/favorite.component';\nimport { AccountComponent } from 'src/app/account/account.component';\nimport { LoginComponent } from 'src/app/login/login.component';\n\nconst routes: Routes = [\n    { path: '', component: AccountComponent, canActivate: guards },\n    { path: 'favorite', component: FavoriteComponent, canActivate: guards },\n    { path: 'login', component: LoginComponent },\n]\n\n@NgModule({\n    declarations: [FavoriteComponent, AccountComponent, LoginComponent],\n    imports: [\n        SharedModule,\n        RouterModule.forChild(routes),\n    ]\n})\nexport class AccountModule { }\n"]}